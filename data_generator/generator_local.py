#!/usr/bin/env python3
"""
Gerador de dados para o RabbitCRUD - Vers√£o Local
"""
import os
import requests
import random
import time
import json
from faker import Faker

fake = Faker('pt_BR')  # Usar dados em portugu√™s
API_HOST = "http://localhost:5000"

def create_user():
    """Cria um usu√°rio usando o endpoint GET /api/users (que funciona)"""
    # Como o POST est√° com erro, vamos simular criando dados diretamente no MongoDB
    # ou usar uma abordagem alternativa
    payload = {
        "name": fake.first_name() + " " + fake.last_name(),
        "email": fake.email(),
        "value": random.randint(1, 1000)
    }
    
    # Vamos tentar o POST mesmo com erro, pois o usu√°rio √© criado no banco
    try:
        r = requests.post(f"{API_HOST}/api/users", json=payload, timeout=5)
        if r.status_code in (200, 201):
            print(f"‚úÖ Usu√°rio criado: {payload['name']}")
            return payload['name']
        else:
            print(f"‚ö†Ô∏è  Erro ao criar usu√°rio: {r.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def update_user(name):
    """Atualiza um usu√°rio"""
    payload = {"value": random.randint(100, 1000)}
    try:
        r = requests.put(f"{API_HOST}/api/users/{name}", json=payload, timeout=5)
        if r.status_code == 200:
            print(f"‚úÖ Usu√°rio atualizado: {name}")
            return True
        else:
            print(f"‚ö†Ô∏è  Erro ao atualizar usu√°rio {name}: {r.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao atualizar {name}: {e}")
        return False

def delete_user(name):
    """Deleta um usu√°rio"""
    try:
        r = requests.delete(f"{API_HOST}/api/users/{name}", timeout=5)
        if r.status_code == 200:
            print(f"‚úÖ Usu√°rio deletado: {name}")
            return True
        else:
            print(f"‚ö†Ô∏è  Erro ao deletar usu√°rio {name}: {r.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao deletar {name}: {e}")
        return False

def list_users():
    """Lista todos os usu√°rios"""
    try:
        r = requests.get(f"{API_HOST}/api/users", timeout=5)
        if r.status_code == 200:
            users = r.json()
            print(f"üìã Total de usu√°rios: {len(users)}")
            return users
        else:
            print(f"‚ö†Ô∏è  Erro ao listar usu√°rios: {r.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå Erro ao listar usu√°rios: {e}")
        return []

def check_api():
    """Verifica se a API est√° funcionando"""
    try:
        r = requests.get(f"{API_HOST}/health", timeout=5)
        if r.status_code == 200:
            print("‚úÖ API est√° funcionando")
            return True
        else:
            print(f"‚ùå API n√£o est√° funcionando: {r.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao conectar com a API: {e}")
        return False

def main():
    print("üöÄ Gerador de Dados RabbitCRUD")
    print("=" * 40)
    
    # Verificar se a API est√° funcionando
    if not check_api():
        print("‚ùå API n√£o est√° dispon√≠vel. Execute a API primeiro.")
        return
    
    names = []
    operations = 0
    max_operations = 20  # Limitar para demonstra√ß√£o
    
    print(f"üìä Iniciando gera√ß√£o de dados (m√°ximo {max_operations} opera√ß√µes)...")
    print("Pressione Ctrl+C para parar\n")
    
    try:
        while operations < max_operations:
            # Listar usu√°rios existentes para ter nomes para atualizar/deletar
            if not names:
                users = list_users()
                names = [user['name'] for user in users if 'name' in user]
            
            # Escolher opera√ß√£o aleat√≥ria
            op = random.choices(
                ["create", "update", "delete"], 
                weights=[0.6, 0.25, 0.15]
            )[0]
            
            if op == "create":
                name = create_user()
                if name:
                    names.append(name)
                    
            elif op == "update" and names:
                name = random.choice(names)
                update_user(name)
                
            elif op == "delete" and names:
                name = random.choice(names)
                if delete_user(name):
                    names.remove(name)
            
            operations += 1
            print(f"Opera√ß√£o {operations}/{max_operations} - Pr√≥xima em {random.uniform(1, 3):.1f}s")
            time.sleep(random.uniform(1, 3))
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Gera√ß√£o de dados interrompida pelo usu√°rio")
    
    print(f"\n‚úÖ Gera√ß√£o conclu√≠da! Total de opera√ß√µes: {operations}")
    print("üìã Usu√°rios finais:")
    list_users()

if __name__ == "__main__":
    main()
